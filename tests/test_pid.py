# Generated by CodiumAI

from lib.pid import _clamp, PID


class TestClamp:

    #  Returns value if within limits
    def test_within_limits(self):
        value = 5
        limits = (0, 10)
        result = _clamp(value, limits)
        assert result == value

    #  Returns None if value is None and limits are specified
    def test_none_value(self):
        value = None
        limits = (0, 10)
        result = _clamp(value, limits)
        assert result is None

    #  Returns upper limit if value is equal to upper limit
    def test_upper_limit(self):
        value = 11
        limits = (0, 10)
        result = _clamp(value, limits)
        assert result == limits[1]


class TestReset:

    #  Resets all terms to 0
    def test_reset_resets_all_terms_to_zero(self):
        pid = PID()
        pid._proportional = 1
        pid._integral = 2
        pid._derivative = 3
        pid._last_time = 4
        pid._last_output = 5
        pid._last_input = 6
        pid._last_error = 7

        pid.reset()

        assert pid._proportional == 0
        assert pid._integral == 0
        assert pid._derivative == 0
        assert pid._last_output is None
        assert pid._last_input == 0
        assert pid._last_error == 0

    #  Handles None value for output limits
    def test_reset_handles_none_value_for_output_limits(self):
        pid = PID()
        pid.out_limits = (None, None)

        pid.reset()

        assert pid.out_limits == (None, None)

    #  Handles None value for integral limits
    def test_reset_handles_none_value_for_integral_limits(self):
        pid = PID()
        pid.int_limits = (None, None)

        pid.reset()

        assert pid.int_limits == (None, None)
